/* Generated by Yosys 0.9 (git sha1 1979e0b) */

(* src = "Control.v:23" *)
module Control(\opcode_i[0] , \opcode_i[1] , \opcode_i[2] , \opcode_i[3] , \opcode_i[4] , \opcode_i[5] , \opcode_i[6] , MemtoReg_o, MemRead_o, MemWrite_o, RegWrite_o, \ALUOp_o[0] , \ALUOp_o[1] , ALUSrc_o, immSelect_o);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  wire _11_;
  wire _12_;
  wire _13_;
  wire _14_;
  wire _15_;
  wire _16_;
  wire _17_;
  wire _18_;
  (* src = "Control.v:26" *)
  output \ALUOp_o[0] ;
  (* src = "Control.v:26" *)
  output \ALUOp_o[1] ;
  (* src = "Control.v:28" *)
  output ALUSrc_o;
  (* src = "Control.v:27" *)
  output MemRead_o;
  (* src = "Control.v:27" *)
  output MemWrite_o;
  (* src = "Control.v:27" *)
  output MemtoReg_o;
  (* src = "Control.v:27" *)
  output RegWrite_o;
  (* src = "Control.v:28" *)
  output immSelect_o;
  (* src = "Control.v:25" *)
  input \opcode_i[0] ;
  (* src = "Control.v:25" *)
  input \opcode_i[1] ;
  (* src = "Control.v:25" *)
  input \opcode_i[2] ;
  (* src = "Control.v:25" *)
  input \opcode_i[3] ;
  (* src = "Control.v:25" *)
  input \opcode_i[4] ;
  (* src = "Control.v:25" *)
  input \opcode_i[5] ;
  (* src = "Control.v:25" *)
  input \opcode_i[6] ;
  NOT _19_ (
    .A(\opcode_i[5] ),
    .Y(_00_)
  );
  NAND _20_ (
    .A(\opcode_i[1] ),
    .B(\opcode_i[0] ),
    .Y(_01_)
  );
  OR _21_ (
    .A(\opcode_i[3] ),
    .B(_01_),
    .Y(_02_)
  );
  NOR _22_ (
    .A(\opcode_i[2] ),
    .B(_02_),
    .Y(_03_)
  );
  OR _23_ (
    .A(\opcode_i[6] ),
    .B(\opcode_i[5] ),
    .Y(_04_)
  );
  NOR _24_ (
    .A(\opcode_i[4] ),
    .B(_04_),
    .Y(_05_)
  );
  NAND _25_ (
    .A(_03_),
    .B(_05_),
    .Y(_06_)
  );
  NOT _26_ (
    .A(_06_),
    .Y(MemRead_o)
  );
  NAND _27_ (
    .A(\opcode_i[4] ),
    .B(_03_),
    .Y(_07_)
  );
  OR _28_ (
    .A(\opcode_i[6] ),
    .B(_07_),
    .Y(_08_)
  );
  AND _29_ (
    .A(\opcode_i[2] ),
    .B(\opcode_i[6] ),
    .Y(_09_)
  );
  AND _30_ (
    .A(_00_),
    .B(\opcode_i[4] ),
    .Y(_10_)
  );
  NAND _31_ (
    .A(_09_),
    .B(_10_),
    .Y(_11_)
  );
  OR _32_ (
    .A(_02_),
    .B(_11_),
    .Y(_12_)
  );
  AND _33_ (
    .A(_06_),
    .B(_12_),
    .Y(_13_)
  );
  NAND _34_ (
    .A(_08_),
    .B(_13_),
    .Y(RegWrite_o)
  );
  NOR _35_ (
    .A(_00_),
    .B(\opcode_i[4] ),
    .Y(_14_)
  );
  NAND _36_ (
    .A(_03_),
    .B(_14_),
    .Y(_15_)
  );
  OR _37_ (
    .A(\opcode_i[6] ),
    .B(_15_),
    .Y(_16_)
  );
  NOT _38_ (
    .A(_16_),
    .Y(MemWrite_o)
  );
  OR _39_ (
    .A(_00_),
    .B(_08_),
    .Y(_17_)
  );
  AND _40_ (
    .A(_13_),
    .B(_16_),
    .Y(_18_)
  );
  AND _41_ (
    .A(_17_),
    .B(_18_),
    .Y(\ALUOp_o[0] )
  );
  AND _42_ (
    .A(_13_),
    .B(_15_),
    .Y(\ALUOp_o[1] )
  );
  AND _43_ (
    .A(_12_),
    .B(_17_),
    .Y(ALUSrc_o)
  );
  assign MemtoReg_o = MemRead_o;
  assign immSelect_o = MemWrite_o;
endmodule
