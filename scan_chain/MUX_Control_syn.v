/* Generated by Yosys 0.9 (git sha1 1979e0b) */

(* src = "MUX_Control.v:23" *)
module MUX_Control(Hazard_i, \RegDst_i[0] , \RegDst_i[1] , \RegDst_i[2] , \RegDst_i[3] , \RegDst_i[4] , \ALUOp_i[0] , \ALUOp_i[1] , ALUSrc_i, RegWrite_i, MemToReg_i, MemRead_i, MemWrite_i, \RegDst_o[0] , \RegDst_o[1] , \RegDst_o[2] , \RegDst_o[3] , \RegDst_o[4] , \ALUOp_o[0] , \ALUOp_o[1] , ALUSrc_o, RegWrite_o, MemToReg_o, MemRead_o, MemWrite_o);
  wire _00_;
  (* src = "MUX_Control.v:41" *)
  input \ALUOp_i[0] ;
  (* src = "MUX_Control.v:41" *)
  input \ALUOp_i[1] ;
  (* src = "MUX_Control.v:45" *)
  output \ALUOp_o[0] ;
  (* src = "MUX_Control.v:45" *)
  output \ALUOp_o[1] ;
  (* src = "MUX_Control.v:43" *)
  input ALUSrc_i;
  (* src = "MUX_Control.v:47" *)
  output ALUSrc_o;
  (* src = "MUX_Control.v:43" *)
  input Hazard_i;
  (* src = "MUX_Control.v:43" *)
  input MemRead_i;
  (* src = "MUX_Control.v:47" *)
  output MemRead_o;
  (* src = "MUX_Control.v:43" *)
  input MemToReg_i;
  (* src = "MUX_Control.v:47" *)
  output MemToReg_o;
  (* src = "MUX_Control.v:43" *)
  input MemWrite_i;
  (* src = "MUX_Control.v:47" *)
  output MemWrite_o;
  (* src = "MUX_Control.v:42" *)
  input \RegDst_i[0] ;
  (* src = "MUX_Control.v:42" *)
  input \RegDst_i[1] ;
  (* src = "MUX_Control.v:42" *)
  input \RegDst_i[2] ;
  (* src = "MUX_Control.v:42" *)
  input \RegDst_i[3] ;
  (* src = "MUX_Control.v:42" *)
  input \RegDst_i[4] ;
  (* src = "MUX_Control.v:46" *)
  output \RegDst_o[0] ;
  (* src = "MUX_Control.v:46" *)
  output \RegDst_o[1] ;
  (* src = "MUX_Control.v:46" *)
  output \RegDst_o[2] ;
  (* src = "MUX_Control.v:46" *)
  output \RegDst_o[3] ;
  (* src = "MUX_Control.v:46" *)
  output \RegDst_o[4] ;
  (* src = "MUX_Control.v:43" *)
  input RegWrite_i;
  (* src = "MUX_Control.v:47" *)
  output RegWrite_o;
  AND _01_ (
    .A(_00_),
    .B(\ALUOp_i[1] ),
    .Y(\ALUOp_o[1] )
  );
  AND _02_ (
    .A(_00_),
    .B(\RegDst_i[0] ),
    .Y(\RegDst_o[0] )
  );
  AND _03_ (
    .A(_00_),
    .B(\RegDst_i[1] ),
    .Y(\RegDst_o[1] )
  );
  AND _04_ (
    .A(_00_),
    .B(\RegDst_i[2] ),
    .Y(\RegDst_o[2] )
  );
  AND _05_ (
    .A(_00_),
    .B(\RegDst_i[3] ),
    .Y(\RegDst_o[3] )
  );
  AND _06_ (
    .A(_00_),
    .B(\RegDst_i[4] ),
    .Y(\RegDst_o[4] )
  );
  NOT _07_ (
    .A(Hazard_i),
    .Y(_00_)
  );
  AND _08_ (
    .A(MemWrite_i),
    .B(_00_),
    .Y(MemWrite_o)
  );
  AND _09_ (
    .A(_00_),
    .B(MemToReg_i),
    .Y(MemToReg_o)
  );
  AND _10_ (
    .A(_00_),
    .B(MemRead_i),
    .Y(MemRead_o)
  );
  AND _11_ (
    .A(_00_),
    .B(ALUSrc_i),
    .Y(ALUSrc_o)
  );
  AND _12_ (
    .A(_00_),
    .B(RegWrite_i),
    .Y(RegWrite_o)
  );
  AND _13_ (
    .A(_00_),
    .B(\ALUOp_i[0] ),
    .Y(\ALUOp_o[0] )
  );
endmodule
